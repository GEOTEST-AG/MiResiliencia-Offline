@model ResTB_API.Models.ProjectResult
@using ResTB_API.Models
@using ResTB_API.Models.Database.Domain
@using ResTB_API.Resources

@{
    List<string> datasets = new List<string>();
    //List<string> colors = new List<string>() { "orange", "violet", "blue", "red", "yellow" };

    // "Sequía","Aluvión","Inundación","Caída","Deslizamiento rápido"
    Dictionary<int, string> colorsDic = new Dictionary<int, string>() {
{ 1, "orange"},{ 2, "purple"},{ 3, "blue"},{ 4, "red"},{ 5, "brown"}};

    Dictionary<int, string> colorsDic2 = new Dictionary<int, string>() {
{ 11, "rgb(255, 201, 102)"},
{ 12, "rgb(153, 99, 0)" },
{ 13, "rgb(255, 165, 0)"},
{ 21, "rgb(230, 0, 230)"},
{ 22, "rgb(56, 0, 56)"},
{ 23, "rgb(128, 0, 128)"},
{ 31, "rgb(102, 102, 255)"},
{ 32, "rgb(0, 0, 153)"},
{ 33, "rgb(0, 0, 255)"},
{ 41, "rgb(255, 102, 102)"},
{ 42, "rgb(153, 0, 0)"},
{ 43, "rgb(255, 0, 0)"},
{ 51, "rgb(214, 95, 95)"},
{ 52, "rgb(84, 21, 21)"},
{ 53, "rgb(186, 21, 21)"},
};


    if (Model == null)
    {

    }
    else
    {
        //foreach (bool beforeAction in new List<bool>() { true, false })
        //{
        foreach (NatHazard hazard in Model.NatHazards)
        {
            if (Model.ProcessResults.Where(p => p.NatHazard.ID == hazard.ID).Any())
            {
                ProcessResult left = Model.ProcessResults.Where(p => p.BeforeAction == true && p.NatHazard.ID == hazard.ID).SingleOrDefault();
                ProcessResult right = Model.ProcessResults.Where(p => p.BeforeAction == false && p.NatHazard.ID == hazard.ID).SingleOrDefault();

                double valueP1 = left?.CollectiveRiskPerson.Item1 ?? 0;
                double valueP2 = right?.CollectiveRiskPerson.Item1 ?? 0;
                double valueS1 = left?.CollectiveRiskProperty.Item1 ?? 0;
                double valueS2 = right?.CollectiveRiskProperty.Item1 ?? 0;
                double valueI1 = left?.CollectiveRiskIndirect.Item1 ?? 0;
                double valueI2 = right?.CollectiveRiskIndirect.Item1 ?? 0;

                string color;
                string dataset = "";
                int colorID = hazard.ID * 10; ;

                if (!colorsDic2.TryGetValue(colorID + 1, out color)) { color = "lightgray"; }

                dataset = $"{{ " +
                    $"label: \"{hazard.Name} - {ResSummary.TXT_Person}\", " +
                    $"data: [{valueP1:F0},{valueP2:F0}], " +
                    $"backgroundColor: [\"{color}\",\"{color}\"], " +
                    $"stack: \"{hazard.ID}\" " +
                    $"}} ";
                datasets.Add(dataset);

                if (!colorsDic2.TryGetValue(colorID + 2, out color)) { color = "gray"; }

                dataset = $"{{ " +
                    $"label: \"{hazard.Name} - {ResSummary.TXT_Property}\", " +
                    $"data: [{valueS1:F0},{valueS2:F0}], " +
                    $"backgroundColor: [\"{color}\",\"{color}\"], " +
                    $"stack: \"{hazard.ID}\" " +
                    $"}} ";
                datasets.Add(dataset);

                if (!colorsDic2.TryGetValue(colorID + 3, out color)) { color = "darkgray"; }
         
                dataset = $"{{ " +
                    $"label: \"{hazard.Name} - {ResSummary.TXT_Indirect}\", " +
                    $"data: [{valueI1:F0},{valueI2:F0}], " +
                    $"backgroundColor: [\"{color}\",\"{color}\"], " +
                    $"stack: \"{hazard.ID}\" " +
                    $"}} ";
                datasets.Add(dataset);


            }
        }

        //}
    }
}


<div>

    <div style="width:100%">
        <canvas id="projectChart_beforeAfterStacked2"></canvas>
    </div>
    <script>
        var ctx = document.getElementById("projectChart_beforeAfterStacked2");
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['@Raw(ResResult.PR_beforeActionString)', '@Raw(ResResult.PR_afterActionString)'],
                    datasets: [@Raw(String.Join(",", datasets.ToArray()))]
            },
            options: {
                scales: {
                    responsive: true,
                    title: {
                    },
                    xAxes: [{
                        stacked: true,
                        display: true,
                        scaleLabel: {
                            display: true,
                        },
                        ticks: {
                            autoSkip: false,
                        },
                    }],
                    yAxes: [{
                        stacked: true,
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: '@Raw(ResResult.PR_Risk)'
                        },
                        ticks: {
                            beginAtZeto: true,
                            callback: function (value, index, values) {
                                return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + '@Raw(ResFormat.DF_PerYear)';
                            }
                        },
                    }]
                },
                line: {
                    borderWidth: 3
                },
                legend: {
                    position: 'right'
                },
                tooltips: {
                    mode: 'x',
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var label = data.datasets[tooltipItem.datasetIndex].label || '';

                            if (label) {
                                label += ': ';
                            }
                            label += tooltipItem.yLabel.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + '@Raw(ResFormat.DF_PerYear)';
                            return label;
                        }
                    }
                }
            }
        });
    </script>
</div>
