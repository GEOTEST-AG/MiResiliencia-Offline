@model List<ResTB_API.Models.ScenarioResult>
@using ResTB_API.Models
@using ResTB_API.Resources

@{
    Random rnd = new Random();
    int randomID = rnd.Next(10000, 99999);

    List<string> datasets = new List<string>();

    // "Sequía","Aluvión","Inundación","Caída","Deslizamiento rápido"
    Dictionary<int, string> colorsDic = new Dictionary<int, string>() {
{ 1, "orange"},
{ 2, "purple"},
{ 3, "blue"},
{ 4, "red"},
{ 5, "brown"}
};
    Dictionary<int, string> colorsDic2 = new Dictionary<int, string>() {
{ 11, "rgb(255, 201, 102)"},
{ 12, "rgb(153, 99, 0)" },
{ 13, "rgb(255, 165, 0)"},
{ 21, "rgb(230, 0, 230)"},
{ 22, "rgb(56, 0, 56)"},
{ 23, "rgb(128, 0, 128)"},
{ 31, "rgb(102, 102, 255)"},
{ 32, "rgb(0, 0, 153)"},
{ 33, "rgb(0, 0, 255)"},
{ 41, "rgb(255, 102, 102)"},
{ 42, "rgb(153, 0, 0)"},
{ 43, "rgb(255, 0, 0)"},
{ 51, "rgb(214, 95, 95)"},
{ 52, "rgb(84, 21, 21)"},
{ 53, "rgb(186, 21, 21)"},
};



    string processTitle = "";

    if (Model == null || Model?.Any() == false)
    {

    }
    else
    {
        processTitle = Model.FirstOrDefault()?.NatHazard.Name + " " + Model.FirstOrDefault()?.BeforeActionString;

        foreach (ScenarioResult item in Model)
        {
            randomID += item.getID();

            int colorID = item.NatHazard.ID * 10 + item.IkClass.ID;
            string color;

            if (!colorsDic2.TryGetValue(colorID, out color))
            {
                switch (item.IkClass.ID)
                {
                    case 1:
                        color = "lightgray";
                        break;
                    case 2:
                        color = "gray";
                        break;
                    case 3:
                        color = "darkgray";
                        break;
                    default:
                        color = "gray";
                        break;
                }

            }

            string dataset = $"{{ " +
                $"label: \"{item.NatHazard.Name} {item.IkClass.Description}\", " +
                $"data: [{item.DamageExtentPerson:F0},{item.DamageExtentProperty:F0},{item.DamageExtentIndirect:F0}], " +
                $"backgroundColor: [\"{color}\",\"{color}\",\"{color}\"]" +
                $"}} ";

            datasets.Add(dataset);
        }
    }
}


<div>

    <div style="width:100%">
        <canvas id="myChart_@randomID"></canvas>
    </div>
    <script>
        var ctx = document.getElementById("myChart_@randomID");
            var myChart = new Chart(ctx, {

                type: 'bar',
                data: {

                    labels: ['@Raw(ResResult.PR_DamageExtentPerson)', '@Raw(ResResult.PR_DamageExtentProperty)', '@Raw(ResResult.PR_DamageExtentIndirect)'],
                    datasets: [@Raw(String.Join(",", datasets.ToArray()))]
            },
            options: {
                scales: {
                    responsive: true,
                    title: {
                        display: true,
                        text: '@Raw(processTitle)'
                    },
                    tooltips: {

                    },
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                        },
                        ticks: {
                            autoSkip: false,
                        },
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: '@Raw(ResResult.PR_DamageExtent)'
                        },
                        ticks: {
                            beginAtZeto: true,
                            callback: function (value, index, values) {
        return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    }
                        },
                    }]
                },
                line: {
                    borderWidth: 3
                },
                legend: {
                    position: 'right'
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItem, data) {
        var label = data.datasets[tooltipItem.datasetIndex].label || '';

        if (label) {
            label += ': ';
        }
        label += tooltipItem.yLabel.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
        return label;
    }
                    }
                }
            }
        });
    </script>
</div>
