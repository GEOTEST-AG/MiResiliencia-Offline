@model ResTB_API.Models.ProjectResult
@using ResTB_API.Models
@using ResTB_API.Models.Database.Domain
@using ResTB_API.Resources

@{
    List<string> datasets = new List<string>();
    //List<string> colors = new List<string>() { "orange", "violet", "blue", "red", "yellow" };

    // "Sequía","Aluvión","Inundación","Caída","Deslizamiento rápido"
    Dictionary<int, string> colorsDic = new Dictionary<int, string>() {
{ 1, "orange"},{ 2, "purple"},{ 3, "blue"},{ 4, "red"},{ 5, "brown"}};

    if (Model == null)
    {

    }
    else
    {
        foreach (bool beforeAction in new List<bool>() { true, false })
        {
            foreach (NatHazard hazard in Model.NatHazards)
            {
                if (Model.ProcessResults.Where(p => p.BeforeAction == beforeAction && p.NatHazard.ID == hazard.ID).Any())
                {
                    ProcessResult item = Model.ProcessResults.Where(p => p.BeforeAction == beforeAction && p.NatHazard.ID == hazard.ID).Single();

                    //string color = colors.ElementAt(colorIndex);
                    string color;// = colorsDic[item.NatHazard.ID];
                    if (!colorsDic.TryGetValue(item.NatHazard.ID, out color))
                    {
                        color = "black";
                    }

                    string dataset = "";

                    if (item.BeforeAction)
                    {
                        dataset = $"{{ " +
                                    $"label: \"{item.NatHazard.Name} - {item.BeforeActionString}\", " +
                                    $"data: [{item.CollectiveRiskTotal.Item1:F0},0], " +
                                    $"backgroundColor: [\"{color}\",\"{color}\"], " +
                                    $"stack: \"{hazard.ID}\" " +
                                    $"}} ";
                    }
                    else
                    {
                        dataset = $"{{ " +
                                    $"label: \"{item.NatHazard.Name} - {item.BeforeActionString}\", " +
                                    $"data: [0,{item.CollectiveRiskTotal.Item1:F0}], " +
                                    $"backgroundColor: [\"{color}\",\"{color}\"], " +
                                    $"stack: \"{hazard.ID}\" " +
                                    $"}} ";
                    }

                    datasets.Add(dataset);

                    //if (item.BeforeAction)
                    //{
                    //    dataset = $"{{ " +
                    //                $"label: \"{item.NatHazard.Name} - Person\", " +
                    //                $"data: [{item.CollectiveRiskPerson.Item1:F0},0], " +
                    //                $"backgroundColor: [\"{color}\",\"{color}\"], " +
                    //                $"stack: \"{hazard.ID}\" " +
                    //                $"}} ";
                    //    datasets.Add(dataset);

                    //    dataset = $"{{ " +
                    //                $"label: \"{item.NatHazard.Name} - Property\", " +
                    //                $"data: [{item.CollectiveRiskProperty.Item1:F0},0], " +
                    //                $"backgroundColor: [\"{color}\",\"{color}\"], " +
                    //                $"stack: \"{hazard.ID}\" " +
                    //                $"}} ";
                    //    datasets.Add(dataset);

                    //    dataset = $"{{ " +
                    //                $"label: \"{item.NatHazard.Name} - Indirect\", " +
                    //                $"data: [{item.CollectiveRiskIndirect.Item1:F0},0], " +
                    //                $"backgroundColor: [\"{color}\",\"{color}\"], " +
                    //                $"stack: \"{hazard.ID}\" " +
                    //                $"}} ";
                    //    datasets.Add(dataset);

                    //}
                    //else
                    //{
                    //    dataset = $"{{ " +
                    //                $"label: \"{item.NatHazard.Name} - {item.BeforeActionString}\", " +
                    //                $"data: [0,{item.CollectiveRiskTotal.Item1:F0}], " +
                    //                $"backgroundColor: [\"{color}\",\"{color}\"], " +
                    //                $"stack: \"{hazard.ID}\" " +
                    //                $"}} ";
                    //    datasets.Add(dataset);
                    //}

                }
            }

        }
    }
}


<div>

    <div style="width:100%">
        <canvas id="projectChart_beforeAfterStacked"></canvas>
    </div>
    <script>
        var ctx = document.getElementById("projectChart_beforeAfterStacked");
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['@Raw(ResResult.PR_beforeActionString)', '@Raw(ResResult.PR_afterActionString)'],
                    datasets: [@Raw(String.Join(",", datasets.ToArray()))]
            },
            options: {
                scales: {
                    responsive: true,
                    title: {
                    },
                    xAxes: [{
                        stacked: true,
                        display: true,
                        scaleLabel: {
                            display: true,
                        },
                        ticks: {
                            autoSkip: false,
                        },
                    }],
                    yAxes: [{
                        stacked: false,
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: '@Raw(ResResult.PR_Risk)'
                        },
                        ticks: {
                            beginAtZeto: true,
                            callback: function (value, index, values) {
                                return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + '@Raw(ResFormat.DF_PerYear)';
                            }
                        },
                    }]
                },
                line: {
                    borderWidth: 3
                },
                legend: {
                    position: 'right'
                },
                tooltips: {
                    callbacks: {
                        label: function (tooltipItem, data) {
                            var label = data.datasets[tooltipItem.datasetIndex].label || '';

                            if (label) {
                                label += ': ';
                            }
                            label += tooltipItem.yLabel.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + '@Raw(ResFormat.DF_PerYear)';
                            return label;
                        }
                    }
                }
            }
        });
    </script>
</div>
