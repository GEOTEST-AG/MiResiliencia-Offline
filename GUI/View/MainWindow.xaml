<Fluent:RibbonWindow
    x:Name="MainWin"
    x:Class="ResTB.GUI.View.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:cez="clr-namespace:ControlzEx;assembly=ControlzEx"
    xmlns:mapwingis="clr-namespace:MapWinGIS;assembly=Interop.MapWinGIS"
    xmlns:c="clr-namespace:ResTB.GUI.Helpers.Converter"
    xmlns:help="clr-namespace:ResTB.GUI.Helpers.HelpSystem"
    xmlns:layerhelper="clr-namespace:ResTB.GUI.Helpers.Layers"
    xmlns:vm="clr-namespace:ResTB.GUI.ViewModel"
    xmlns:map="clr-namespace:ResTB.Map;assembly=ResTBMap"
    xmlns:resx="clr-namespace:ResTB.Translation.Properties;assembly=ResTBTranslation"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:Fluent="urn:fluent-ribbon"
    mc:Ignorable="d"
    MinWidth="600"
    MinHeight="400"
    Width="1280"
    Height="720"
    WindowStartupLocation="CenterScreen"
    Loaded="Window_Loaded" 
    Title="{Binding WindowTitle}"
    DataContext="{Binding Main, Source={StaticResource Locator}}"
    SnapsToDevicePixels="True"   
    Cursor="{Binding Cursor}"   
    help:HelpProvider.HelpTopic="IDH_Overview"
    >

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <i:InvokeCommandAction Command="{Binding ClosingAppCommand}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.Resources>
        <!--<c:Index2BoolConverter    x:Key="Index2BoolConverter"/>-->
        <c:BoolVisibiltyConverter    x:Key="BoolVisibiltyConverter"/>
        <c:BoolVisibiltyInvertedConverter    x:Key="BoolVisibiltyInvertedConverter"/>
        <c:NullVisibiltyConverter    x:Key="NullVisibiltyConverter"/>
        <c:NullVisibiltyCollapsedConverter    x:Key="NullVisibiltyCollapsedConverter"/>
        <c:NullVisibiltyInvertedConverter    x:Key="NullVisibiltyInvertedConverter"/>
        <c:StringVisibiltyConverter    x:Key="StringVisibiltyConverter"/>
        <c:StringVisibiltyInvertedConverter    x:Key="StringVisibiltyInvertedConverter"/>

        <!--provides all tile providers to control-->
        <ObjectDataProvider x:Key="TileProviderValues"
                            MethodName="GetValues" 
                            ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="vm:myTkTileProvider"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!--tree view item styling-->
        <Style x:Key="TreeViewItemStyle" TargetType="TreeViewItem">
            <Setter Property="IsExpanded" Value="True" />
            <Setter Property="IsSelected" Value="{Binding IsInitiallySelected, Mode=OneTime}" />
            <Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
            <Setter Property="layerhelper:VirtualToggleButton.IsVirtualToggleButton" Value="True" />
            <Setter Property="layerhelper:VirtualToggleButton.IsChecked" Value="{Binding IsManuallyChecked}" />
        </Style>
        <HierarchicalDataTemplate x:Key="CheckBoxItemTemplate"
                                  ItemsSource="{Binding Children, Mode=TwoWay}"
                                  >
            <StackPanel Orientation="Horizontal">
                <CheckBox Focusable="False" 
                          Command="{Binding DataContext.ChangeLayerVisibilityCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" 
                          CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                          IsChecked="{Binding IsManuallyChecked, Mode=TwoWay}" 
                          VerticalAlignment="Center"
                          >
                </CheckBox>
                <ContentPresenter Content="{Binding Name, Mode=TwoWay}" 
                                  Margin="2,0"
                                  />
            </StackPanel>
        </HierarchicalDataTemplate>

    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="3" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--Welcome Window with New_Project, Open_Project, and Import_Project -->
        <Grid x:Name="ProjectNullOverlay" Grid.Row="0" Grid.RowSpan="3"  Panel.ZIndex="999" 
              IsHitTestVisible="True"
              Visibility="{Binding Project, Converter={StaticResource NullVisibiltyInvertedConverter}}" 
              Background="{StaticResource MainRedBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
              MaxHeight="400" MaxWidth="500"  
              >
            <DockPanel LastChildFill="True" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center"
                       >
                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White" FontSize="26" TextWrapping="Wrap"
                           DockPanel.Dock="Top" Margin="0,20,0,0" Padding="5" Text="{x:Static resx:Resources.App_Name}"
                           MinWidth="300"
                                   />
                <Border BorderThickness="0" DockPanel.Dock="Top" BorderBrush="White" Margin="0,10,0,40"/>

                <StackPanel Orientation="Vertical" DockPanel.Dock="Top" Margin="5"
                            Visibility="{Binding HasDBConnection, Converter={StaticResource BoolVisibiltyConverter}}">
                    <Button Content="{x:Static resx:Resources.Project_New}" Margin="5"  HorizontalContentAlignment="Left" Background="White"
                            Command="{Binding NewProjectWinCommand}" ContentTemplate="{StaticResource extBtnProjectNewContent}"/>

                    <Button Content="{x:Static resx:Resources.Project_Open}" Margin="5"  HorizontalContentAlignment="Left" Background="White"
                            Command="{Binding OpenProjectWinCommand}" ContentTemplate="{StaticResource extBtnProjectOpenContent}" />

                    <Button Content="{x:Static resx:Resources.Project_Import}" Margin="5"  HorizontalContentAlignment="Left" Background="White"
                            Command="{Binding ImportProjectCommand}" ContentTemplate="{StaticResource extBtnDatabaseImportContent}" />

                </StackPanel>

                <Border BorderBrush="White" DockPanel.Dock="Top" BorderThickness="1"
                        Visibility="{Binding HasDBConnection, Converter={StaticResource BoolVisibiltyInvertedConverter}}">
                    <StackPanel Orientation="Horizontal" Grid.IsSharedSizeScope="True" DockPanel.Dock="Top" Margin="5">
                        <Image Source="{StaticResource imgDatabaseError}" Height="30" Margin="5"/>
                        <Label FontSize="20" Content="{x:Static resx:Resources.Msg_Db_Disconnected}" Foreground="White"/>
                    </StackPanel>
                </Border>
            </DockPanel>
        </Grid>

        <!--Overlay while editing map-->
        <Grid x:Name="UIOnEditing" Grid.Row="0" Panel.ZIndex="11" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Visibility="{Binding IsEditingMap, Converter={StaticResource BoolVisibiltyConverter}}" Background="WhiteSmoke">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Vertical" Grid.Column="0" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="LightCoral" Opacity="1" 
                    Command="{Binding DeleteShapeCommand}"
                    ContentTemplate="{StaticResource extBtnDeleteBin}" BorderThickness="0"/>
                <TextBlock Text="{x:Static resx:Resources.Info_Edit_Delete}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Vertical" Grid.Column="1" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="PaleGreen" Opacity="1" 
                    Command="{Binding StopEditingMapCommand}"
                    ContentTemplate="{StaticResource extBtnCheckOutline}" BorderThickness="0"/>
                <TextBlock Text="{x:Static resx:Resources.Info_Edit_End}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Vertical" Grid.Column="2" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="PaleVioletRed" Opacity="1" 
                    Command="{Binding UndoEditingCommand}" 
                    ContentTemplate="{StaticResource extBtnUndo}" BorderThickness="0"/>
                <TextBlock Text="{x:Static resx:Resources.Info_Edit_Undo}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>
        </Grid>

        <!--Overlay while adding shape to map-->
        <Grid x:Name="UIOnAdding"  Grid.Row="0" Panel.ZIndex="11" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Visibility="{Binding IsAddingShape, Converter={StaticResource BoolVisibiltyConverter}}" Background="WhiteSmoke">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Vertical" Grid.Column="0">
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="LightBlue" Opacity="1" 
                    IsHitTestVisible="False" Content="{x:Static resx:Resources.Info_Edit_Polygone}"
                    ContentTemplate="{StaticResource extBtnQuestion}" BorderThickness="0">
                </Button>
                <TextBlock Text="{x:Static resx:Resources.Info_Edit_Polygone}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Vertical" Grid.Column="1" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="PaleGreen" Opacity="1" 
                    Command="{Binding StopEditingMapCommand}" Content="{x:Static resx:Resources.Info_Edit_End}"
                    ContentTemplate="{StaticResource extBtnCheckOutline}" BorderThickness="0"/>
                <TextBlock Text="{x:Static resx:Resources.Info_Edit_End}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Vertical" Grid.Column="2" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="PaleVioletRed" Opacity="1" 
                    Command="{Binding UndoEditingCommand}" 
                    ContentTemplate="{StaticResource extBtnUndo}" BorderThickness="0"/>
                <TextBlock Text="{x:Static resx:Resources.Info_Edit_Undo}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>
        </Grid>

        <!--Overlay while copying resilience on map-->
        <Grid x:Name="UIOnCopying" Grid.Row="0" Panel.ZIndex="11" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Visibility="{Binding IsCopyingResilience, Converter={StaticResource BoolVisibiltyConverter}}" Background="WhiteSmoke">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Vertical" Grid.Column="0" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="LightBlue" Opacity="1" 
                    IsHitTestVisible="False" Content="{x:Static resx:Resources.Info_Edit_Polygone}"
                    ContentTemplate="{StaticResource extBtnQuestion}" BorderThickness="0">
                </Button>
                <TextBlock Text="{x:Static resx:Resources.Info_Copy_Resilience}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Vertical" Grid.Column="1" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="PaleGreen" Opacity="1" 
                    Command="{Binding StopSelectionMapCommand}"
                    ContentTemplate="{StaticResource extBtnCheckOutline}" BorderThickness="0"/>
                <TextBlock Text="{x:Static resx:Resources.Info_Edit_End}"  TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>

            <StackPanel Orientation="Vertical" Grid.Column="2" >
                <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="50"
                    Background="LightBlue" Opacity="1" 
                    Command="{Binding UndoEditingCommand}" 
                    BorderThickness="0" IsHitTestVisible="False"/>
                <TextBlock TextWrapping="Wrap" Padding ="5" Background="White"
                       HorizontalAlignment="Stretch" TextAlignment="Center"/>
            </StackPanel>
        </Grid>

        <!--Main menu bar using Ribbons-->
        <Fluent:Ribbon Grid.Row="0" x:Name="RibbonMain" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                       IsMinimized="False" CanMinimize="False"
                       BorderBrush="WhiteSmoke"  AreTabHeadersVisible="False" BorderThickness="0,5"
                       Visibility="{Binding Project, Converter={StaticResource NullVisibiltyConverter}}" 
                       ContextMenuOpening="RibbonMain_ContextMenuOpening"
                       CanCustomizeQuickAccessToolBar="False" 
                       CanCustomizeQuickAccessToolBarItems="False"
                       CanCustomizeRibbon="False"
                           >
            <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Project}" Margin="0,0,0,0"
                                  Background="{StaticResource MainRedBrush}"
                                  Foreground="White" MinWidth="100" 
                                  >
                <Fluent:RibbonGroupBox >
                    <!--Header="{x:Static resx:Resources.Project_Management}"-->
                    <Fluent:Button Header="{x:Static resx:Resources.Project_Create}" Command="{Binding NewProjectWinCommand}" Size="Large">
                        <Fluent:Button.LargeIcon>
                            <ContentControl ContentTemplate="{StaticResource extBtnProjectNew}"/>
                        </Fluent:Button.LargeIcon>
                    </Fluent:Button>
                    <Fluent:Button Header="{x:Static resx:Resources.Project_Open}" Command="{Binding OpenProjectWinCommand}" Size="Large">
                        <Fluent:Button.LargeIcon>
                            <ContentControl ContentTemplate="{StaticResource extBtnProjectOpen}"/>
                        </Fluent:Button.LargeIcon>
                    </Fluent:Button>
                    <Separator/>
                    <Fluent:Button Header="{x:Static resx:Resources.Project_Export}" IsEnabled="True" Size="Middle" Command="{Binding ExportProjectCommand}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnDatabaseExport}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>
                    <Fluent:Button Header="{x:Static resx:Resources.Project_Import}" IsEnabled="True" Size="Middle" Command="{Binding ImportProjectCommand}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnDatabaseImport}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>
                    <Fluent:Button Header="{x:Static resx:Resources.Project_Print}" IsEnabled="True" Size="Middle" Command="{Binding PrintCommand}" >
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnPrint}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>

                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox  >
                    <!--Header="{x:Static resx:Resources.Map_Control}"-->
                    <Fluent:Button Header="{x:Static resx:Resources.Map_Zoom_In}" Size="Large" Command="{Binding MapCursorModeCommand}" 
                                   CommandParameter="{x:Static mapwingis:tkCursorMode.cmZoomIn}">
                        <Fluent:Button.LargeIcon>
                            <ContentControl ContentTemplate="{StaticResource extBtnZoomIn}"/>
                        </Fluent:Button.LargeIcon>
                    </Fluent:Button>
                    <Fluent:Button Header="{x:Static resx:Resources.Map_Zoom_Out}" Size="Large" Command="{Binding MapCursorModeCommand}" 
                                   CommandParameter="{x:Static mapwingis:tkCursorMode.cmZoomOut}">
                        <Fluent:Button.LargeIcon>
                            <ContentControl ContentTemplate="{StaticResource extBtnZoomOut}"/>
                        </Fluent:Button.LargeIcon>
                    </Fluent:Button>
                    <Fluent:Button Header="{x:Static resx:Resources.Map_Pan}" Size="Large" Command="{Binding MapCursorModeCommand}" 
                                   CommandParameter="{x:Static mapwingis:tkCursorMode.cmPan}">
                        <Fluent:Button.LargeIcon>
                            <ContentControl ContentTemplate="{StaticResource extBtnPanArrow}"/>
                        </Fluent:Button.LargeIcon>
                    </Fluent:Button>
                </Fluent:RibbonGroupBox>
                <Fluent:RibbonGroupBox >
                    <Fluent:Button Header="{x:Static resx:Resources.GUI_Help}" Size="Large" Command="{Binding HelpCommand}" 
                                   CommandParameter="IDH_Overview">
                        <Fluent:Button.LargeIcon>
                            <ContentControl ContentTemplate="{StaticResource extBtnQuestion}"/>
                        </Fluent:Button.LargeIcon>
                    </Fluent:Button>
                    
                    <Separator/>


                    <!--<Fluent:Button Header="{Binding MainAssemblySigner}" IsEnabled="False" Size="Middle" IsHitTestVisible="True" 
                                   ToolTip="{x:Static resx:Resources.Check_Signature}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnCert}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>

                    <Fluent:Button Header="{Binding KernelAssemblySigner}" IsEnabled="False" Size="Middle" IsHitTestVisible="True" 
                                   ToolTip="{x:Static resx:Resources.Check_Signature}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnCert}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>
                    <Separator/>-->

                    <Fluent:Button Header="{x:Static resx:Resources.Check_Signature}" IsEnabled="False" Size="Middle" IsHitTestVisible="True" 
                                   ToolTip="{Binding KernelAssemblySigner}"
                                   Visibility="{Binding SignatureValid, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnCert}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>
                    <Fluent:Button Header="{x:Static resx:Resources.Check_SignatureNone}" IsEnabled="False" Size="Middle" IsHitTestVisible="True" 
                                   ToolTip="{x:Static resx:Resources.Check_SignatureNone}"
                                   Visibility="{Binding SignatureValid, Converter={StaticResource BoolVisibiltyInvertedConverter}}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnError}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>

                    <Fluent:Button Header="{x:Static resx:Resources.Check_Database_Default_OK}" IsEnabled="False" Size="Middle" IsHitTestVisible="True"
                                   ToolTip="{Binding DatabaseHash}"
                                   Visibility="{Binding DatabaseDefault, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnDatabaseOK}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>
                    <Fluent:Button Header="{x:Static resx:Resources.Check_Database_Default_NOK}" IsEnabled="False" Size="Middle" IsHitTestVisible="True"
                                   ToolTip="{Binding DatabaseHash}"
                                   Visibility="{Binding DatabaseDefault, Converter={StaticResource BoolVisibiltyInvertedConverter}}">
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnDatabaseAlert}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>

                    <Fluent:Button Header="{Binding Version}" IsEnabled="False" Size="Middle" IsHitTestVisible="True" >
                        <Fluent:Button.Icon>
                            <ContentControl ContentTemplate="{StaticResource extBtnCompass}"/>
                        </Fluent:Button.Icon>
                    </Fluent:Button>
                    
                </Fluent:RibbonGroupBox>

            </Fluent:RibbonTabItem>
        </Fluent:Ribbon>

        <!--the red line to cross-->
        <Grid Grid.Row="1" Background="{StaticResource MainRedBrush}"
              Visibility="{Binding Project, Converter={StaticResource NullVisibiltyConverter}}"/>

        <!--WORKING AREA-->
        <Grid Grid.Row="2" Margin="2"
              Visibility="{Binding Project, Converter={StaticResource NullVisibiltyConverter}}">
            <Grid.Resources>
                <Style x:Key="showCol" TargetType="{x:Type ColumnDefinition}">
                    <Style.Setters>
                        <Setter Property="Width" Value="300"/>
                    </Style.Setters>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ShowToolColumn}" Value="False">
                            <DataTrigger.Setters>
                                <Setter Property="Width" Value="0"/>
                                <Setter Property="MaxWidth" Value="0"/>
                            </DataTrigger.Setters>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ShowToolColumn}" Value="True">
                            <DataTrigger.Setters>
                                <Setter Property="Width" Value="300"/>
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Resources>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="480" MinWidth="480"/>
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="5" />
                <ColumnDefinition Style="{StaticResource showCol}" />
            </Grid.ColumnDefinitions>

            <!-- Block the left column while editing / adding with overlay-->
            <Grid x:Name="BlockUIOverlayOnEditing" Grid.ColumnSpan="3" Panel.ZIndex="10" 
                  Background="White" Opacity="0.8" 
                  Visibility="{Binding IsEditingMap, Converter={StaticResource BoolVisibiltyConverter}}" 
                  IsHitTestVisible="True">
            </Grid>
            <Grid x:Name="BlockUIOverlayOnAdding"  Grid.ColumnSpan="3" Panel.ZIndex="10" 
                  Background="White" Opacity="0.8" 
                  Visibility="{Binding IsAddingShape, Converter={StaticResource BoolVisibiltyConverter}}" 
                  IsHitTestVisible="True">
            </Grid>
            <Grid x:Name="BlockUIOverlayOnCopy"  Grid.ColumnSpan="3" Panel.ZIndex="10" 
                  Background="White" Opacity="0.8" 
                  Visibility="{Binding IsCopyingResilience, Converter={StaticResource BoolVisibiltyConverter}}" 
                  IsHitTestVisible="True">
            </Grid>

            <!--TabControl on the left side-->
            <DockPanel Grid.Column="0" LastChildFill="True">
                <TabControl TabStripPlacement="Top" Margin="0,0,0,0"
                            x:Name="TabControl1" DockPanel.Dock="Bottom" SelectedIndex="{Binding TabControlSelectedIndex}" SelectedItem="{Binding TabControlSelectedItem}">

                    <TabControl.Resources>
                        <Style TargetType="ToolTip">
                            <Setter Property="ToolTipService.ShowDuration" Value="10000"/>
                            <Setter Property="ToolTipService.BetweenShowDelay" Value="100"/>
                            <Setter Property="ToolTipService.InitialShowDelay" Value="100"/>
                            <Setter Property="ToolTipService.IsEnabled" Value="True"/>
                        </Style>
                        <Style TargetType="{x:Type TabItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type TabItem}">
                                        <Grid>
                                            <Border Name="Border" BorderThickness="4" BorderBrush="WhiteSmoke">
                                                <ContentPresenter  VerticalAlignment="Center" Margin="5" 
                                                                   HorizontalAlignment="Center"
                                                                   ContentSource="Header" >
                                                </ContentPresenter>
                                            </Border>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MainRedBrush}" />
                                                <Setter TargetName="Border" Property="BorderThickness" Value="4" />
                                            </Trigger>
                                            <Trigger Property="IsSelected" Value="False">
                                                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                                                <Setter TargetName="Border" Property="Opacity" Value="0.3" />
                                            </Trigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsMouseOver" Value="True" />
                                                    <Condition Property="IsSelected" Value="False" />
                                                </MultiTrigger.Conditions>
                                                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource MainRedBrush}" />
                                                <Setter TargetName="Border" Property="BorderThickness" Value="4" />
                                                <Setter TargetName="Border" Property="Opacity" Value="0.6" />
                                            </MultiTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </TabControl.Resources>

                    <TabItem TabIndex="0" x:Name="TabProject">
                        <TabItem.Header>
                            <Grid Height="40" Width="40" x:Name="TabProjectHeader">
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True"
                                             Content="{x:Static resx:Resources.Project}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid Background="Transparent"></Grid>
                                <!--Needed for proper mouse handling-->
                                <Image Source="{StaticResource imgFolder}"  Height="35" Width="35"/>
                                <!--<TextBlock Grid.Row="1" Text="{x:Static resx:Resources.Project}"/>-->
                            </Grid>

                        </TabItem.Header>
                        <DockPanel LastChildFill="False">
                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                       DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                       FontSize="16" Text="{x:Static resx:Resources.Project}"
                                           />
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_Perimeter"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False" ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Project_Perimeter}" IsSelected="True">
                                    <Fluent:RibbonGroupBox>
                                        <Fluent:Button Header="{x:Static resx:Resources.New}"  Command="{Binding AddPerimeterCommand}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPolygonPlus}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                        <Fluent:Button Header="{x:Static resx:Resources.Edit_Geometry}" Command="{Binding EditPerimeterCommand}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPolylineEdit}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                        <!--<Fluent:Button Header="{x:Static resx:Resources.Delete}" Command="{Binding DeletePerimeterCommand}" >
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnDeleteBin}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>-->
                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>
                            <!--<Separator DockPanel.Dock="Top"></Separator>-->
                            <!--<StackPanel Orientation="Vertical" Grid.IsSharedSizeScope="True" DockPanel.Dock="Top" Margin="5,10">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="Label"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Content="{x:Static resx:Resources.Project_Name}"/>
                                    <TextBox Grid.Column="1" Text="{Binding Project.Name}" x:Name="txtProjectName"></TextBox>
                                </Grid>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="Label"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Content="{x:Static resx:Resources.Project_Number}"/>
                                    <TextBox Grid.Column="1" Text="{Binding Project.Number}" x:Name="txtProjectNumber"></TextBox>
                                </Grid>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="Label"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Content="{x:Static resx:Resources.Description}"/>
                                    <TextBox Grid.Column="1" Text="{Binding Project.Description}" x:Name="txtProjectDesc"></TextBox>
                                </Grid>
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5">
                                    <Fluent:Button Header="{x:Static resx:Resources.Save}" Command="{Binding UpdateProjectCommand}">
                                        <Fluent:Button.LargeIcon>
                                            <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                        </Fluent:Button.LargeIcon>
                                    </Fluent:Button>
                                </StackPanel>
                            </StackPanel>-->

                            <!--<Separator/>-->

                            <xctk:PropertyGrid DockPanel.Dock="Top" Margin="0,5" SelectedObject="{Binding Project}"
                                               IsCategorized="False" ShowSearchBox="False" ShowSortOptions="False"
                                               ShowSummary="False" ShowTitle="False">

                            </xctk:PropertyGrid>

                            <Fluent:Button DockPanel.Dock="Top" HorizontalAlignment="Right" Margin="0,5" 
                                           Header="{x:Static resx:Resources.Save}" Command="{Binding UpdateProjectCommand}">
                                <Fluent:Button.LargeIcon>
                                    <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                </Fluent:Button.LargeIcon>
                            </Fluent:Button>
                        </DockPanel>
                    </TabItem>
                    <TabItem TabIndex="1" x:Name="TabGK"  >
                        <TabItem.Header>
                            <Grid Height="40" Width="40" x:Name="TabGKHeader" >
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True" 
                                             Content="{x:Static resx:Resources.Hazard_Maps_before_Measure}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid Background="Transparent"></Grid>
                                <Image Source="{StaticResource imgFlash}" Height="35" Width="35"/>
                                <!--<TextBlock Grid.Row="1" TextWrapping="WrapWithOverflow" Text="{x:Static resx:Resources.Hazard_Maps_before_Measure}"/>-->
                            </Grid>
                        </TabItem.Header>
                        <DockPanel LastChildFill="True">

                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                   DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                   FontSize="16" TextWrapping="Wrap" Text="{x:Static resx:Resources.Hazard_Maps_before_Measure}"/>
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_DangerMap"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False" 
                                           ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Map_Mapping}">
                                    <Fluent:RibbonGroupBox Header="{x:Static resx:Resources.Hazard_Map_Mapping}" State="Large">

                                        <Fluent:ComboBox Header="{x:Static resx:Resources.NatHazard}"  IsEditable="False"
                                                         Text="{x:Static resx:Resources.PleaseSelect}" 
                                                         InputWidth="150"
                                                         ItemsSource="{Binding NatHazards}"
                                                         DisplayMemberPath="Name"
                                                         SelectedItem ="{Binding SelectedNatHazard}">
                                        </Fluent:ComboBox>

                                        <Fluent:ComboBox Header="{x:Static resx:Resources.HazardIndex}"  IsEditable="False"
                                                         Text="{x:Static resx:Resources.PleaseSelect}" 
                                                         InputWidth="150"
                                                         SelectedItem="{Binding SelectedHazardIndex}"
                                                         ItemsSource="{Binding HazardIndexes}"
                                                         DisplayMemberPath="Index"
                                                         >
                                        </Fluent:ComboBox>
                                        <!--TODO: add better hazard index selector. ? Slider / Buttons / Colors -->
                                        <!--<Slider Value="{Binding SelectedHazardIndex.Index}" Minimum="1" Maximum="9"/>-->
                                        <Fluent:Button Header="{x:Static resx:Resources.New}" 
                                                       Command="{Binding CreateHazardMapCommand}"
                                                       CommandParameter="{StaticResource True}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPolygonPlus}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                        <Separator/>
                                        <Fluent:Button Header="{x:Static resx:Resources.Map_Selection}"
                                                       Command="{Binding SelectHazardMapCommand}"
                                                       CommandParameter="{StaticResource True}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnSelection}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>

                            <Label DockPanel.Dock="Top" Margin="0,10,0,0"
                                   FontWeight="Bold" 
                                   Visibility="{Binding SelectedHazardMap, Converter={StaticResource NullVisibiltyConverter}}" 
                                   Content="{x:Static resx:Resources.Hazard_Map_Selected}"
                                   />

                            <xctk:PropertyGrid DockPanel.Dock="Top" Margin="0,5" SelectedObject="{Binding SelectedHazardMap}"
                                               IsCategorized="False" ShowSearchBox="False" ShowSortOptions="False"
                                               ShowSummary="False" ShowTitle="False"
                                               Visibility="{Binding SelectedHazardMap, Converter={StaticResource NullVisibiltyConverter}}"
                                               >

                            </xctk:PropertyGrid>

                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5"
                                        Visibility="{Binding SelectedHazardMap, Converter={StaticResource NullVisibiltyConverter}}"
                                        >
                                <Fluent:Button Header="{x:Static resx:Resources.Save}" 
                                               Command="{Binding UpdateSelectedHazardMapCommand}">
                                    <Fluent:Button.LargeIcon>
                                        <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                    </Fluent:Button.LargeIcon>
                                </Fluent:Button>
                                <Fluent:Button Header="{x:Static resx:Resources.Edit_Geometry}" 
                                               Command="{Binding EditHazardMapCommand}"
                                               CommandParameter="{StaticResource True}">
                                    <Fluent:Button.LargeIcon>
                                        <ContentControl ContentTemplate="{StaticResource extBtnPolylineEdit}"/>
                                    </Fluent:Button.LargeIcon>
                                </Fluent:Button>
                            </StackPanel>
                        </DockPanel>
                    </TabItem>
                    <TabItem TabIndex="2" x:Name="TabDP" >
                        <TabItem.Header>
                            <Grid Height="auto" Width="40" x:Name="TabDPHeader">
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True"
                                             Content="{x:Static resx:Resources.DamagePotential}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid Background="Transparent"></Grid>
                                <Image Source="{StaticResource imgHomeCity}" Height="35" Width="35"/>
                                <!--<TextBlock Grid.Row="1" TextWrapping="WrapWithOverflow" Text="{x:Static resx:Resources.DamagePotential}"/>-->
                            </Grid>
                        </TabItem.Header>
                        <DockPanel LastChildFill="False">

                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                   DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                   FontSize="16" TextWrapping="Wrap" Text="{x:Static resx:Resources.DamagePotential}"/>
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_DamagePotential"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False" 
                                           ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Map_Mapping}">
                                    <Fluent:RibbonGroupBox Header="{x:Static resx:Resources.DamagePotential_Mapping}">

                                        <Fluent:ComboBox Header="{x:Static resx:Resources.DamagePotential_Objektclass}" IsEditable="False"
                                                         Text="{x:Static resx:Resources.PleaseSelect}"
                                                         InputWidth="200"
                                                         DisplayMemberPath="Name"
                                                         SelectedItem ="{Binding SelectedObjectClass}"
                                                         ItemsSource="{Binding ObjectClasses}"
                                                         >
                                        </Fluent:ComboBox>
                                        <Fluent:ComboBox Header="{x:Static resx:Resources.DamagePotential_Object}"  IsEditable="False"
                                                         Text="{x:Static resx:Resources.PleaseSelect}" 
                                                         InputWidth="200"
                                                         DisplayMemberPath="Name"
                                                         SelectedItem ="{Binding SelectedObjectParameter}"
                                                         ItemsSource="{Binding FilteredObjectParameters}"
                                                         >
                                        </Fluent:ComboBox>
                                        <DockPanel HorizontalAlignment="Stretch" LastChildFill="False">
                                            <Label DockPanel.Dock="Left" Content="{x:Static resx:Resources.Geometry}" />
                                            <Label DockPanel.Dock="Right" Content="{Binding SelectedObjectParameter.FeatureType}" IsEnabled="False"/>
                                        </DockPanel>

                                        <!--<Label Content="{Binding SelectedObjectParameter.FeatureType}"></Label>-->

                                        <Fluent:Button Header="{x:Static resx:Resources.New}" 
                                                       Command="{Binding AddDamagePotentialCommand}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPolygonPlus}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                        <Separator/>
                                        <Fluent:Button Header="{x:Static resx:Resources.Map_Selection}" Command="{Binding SelectDamagePotentialCommand}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnSelection}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>

                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>

                            <DockPanel ScrollViewer.CanContentScroll="True" DockPanel.Dock="Top"
                                       Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyConverter}}"
                                           >

                                <Label DockPanel.Dock="Top" Margin="0,10,0,0"
                                       FontWeight="Bold" Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyConverter}}" 
                                       Content="{x:Static resx:Resources.DamagePotential_Selected}"
                                       />

                                <xctk:PropertyGrid DockPanel.Dock="Top" Margin="0,5"
                                                   SelectedObject="{Binding SelectedMergedObjectParameter}"
                                                   IsCategorized="False" ShowSearchBox="False" ShowSortOptions="False" AutoGenerateProperties="False"
                                                   ShowSummary="False" ShowTitle="False" 
                                                   PropertyDefinitions="{Binding SelectedMergedPropertyDefinitions}"
                                                   NameColumnWidth="220"
                                                   >
                                    <xctk:PropertyGrid.EditorDefinitions>
                                        <xctk:EditorTemplateDefinition >
                                            <xctk:EditorTemplateDefinition.TargetProperties>
                                                <System:String>Value</System:String>
                                                <System:String>Staff</System:String>
                                            </xctk:EditorTemplateDefinition.TargetProperties>
                                            <xctk:EditorTemplateDefinition.EditingTemplate>
                                                <DataTemplate>
                                                    <xctk:IntegerUpDown Value="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                                    Increment="1000"
                                                                    BorderThickness="0"
                                                                    ButtonSpinnerLocation="Right"
                                                                    HorizontalAlignment="Stretch"
                                                                    TextAlignment="Left"
                                                                    ShowButtonSpinner="True"
                                                                    AllowTextInput="True"
                                                                    FormatString="C0"
                                                                        />
                                                </DataTemplate>

                                            </xctk:EditorTemplateDefinition.EditingTemplate>
                                        </xctk:EditorTemplateDefinition>
                                    </xctk:PropertyGrid.EditorDefinitions>
                                </xctk:PropertyGrid>
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5">
                                    <Fluent:Button Header="{x:Static resx:Resources.Save}" Command="{Binding SaveMappedObjectCommand}">
                                        <Fluent:Button.LargeIcon>
                                            <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                        </Fluent:Button.LargeIcon>
                                    </Fluent:Button>
                                    <Fluent:Button Header="{x:Static resx:Resources.Edit_Geometry}" Command="{Binding EditDamagePotentialCommand}" >
                                        <Fluent:Button.LargeIcon>
                                            <ContentControl ContentTemplate="{StaticResource extBtnPolylineEdit}"/>
                                        </Fluent:Button.LargeIcon>
                                    </Fluent:Button>
                                </StackPanel>
                            </DockPanel>

                        </DockPanel>
                    </TabItem>
                    <TabItem TabIndex="3" x:Name="TabResilience">
                        <TabItem.Header>
                            <Grid Height="40" Width="40" x:Name="TabResilienceHeader">
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True"
                                             Content="{x:Static resx:Resources.Resilience_before_Measure}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid Background="Transparent"></Grid>
                                <Image Source="{StaticResource imgSprout}" Height="35" Width="35"/>
                            </Grid>
                        </TabItem.Header>
                        <DockPanel LastChildFill="True">

                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                   DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                   FontSize="16" TextWrapping="Wrap" Text="{x:Static resx:Resources.Resilience_before_Measure}"/>
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_Resilience"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False" 
                                           ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Resilience}">
                                    <!--Header="{x:Static resx:Resources.Map_Selection}"-->
                                    <Fluent:RibbonGroupBox>
                                        <Fluent:Button Header="{x:Static resx:Resources.Resilience_Copy}" Command="{Binding CopyResilienceCommand}" 
                                                       Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyCollapsedConverter}}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnCopy}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>

                                        <Fluent:Button Header="{x:Static resx:Resources.Resilience_CopyAll}" Command="{Binding CopyAllResilienceCommand}"
                                                       CommandParameter="{StaticResource False}"
                                                       Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyCollapsedConverter}}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnCopyAll}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>

                                        <Separator Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyCollapsedConverter}}"/>

                                        <Fluent:Button Header="{x:Static resx:Resources.Map_Selection}" 
                                                       Command="{Binding SelectResilienceCommand}"
                                                       CommandParameter="{StaticResource True}"
                                                       >
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnSelection}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>

                            <ScrollViewer DockPanel.Dock="Top">
                                <DockPanel DockPanel.Dock="Top"
                                       Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyConverter}}"
                                           >

                                    <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="0,10,0,0" >
                                        <Label FontWeight="Bold" 
                                               Content="{x:Static resx:Resources.DamagePotential_Selected}"
                                               />
                                        <Label Content="{Binding SelectedMappedObject.Objectparameter.Name}"
                                               />
                                    </StackPanel>

                                    <DataGrid ItemsSource="{Binding SelectedMergedObjectParameter.ResilienceValuesMergedBefore}" Margin="0,5"
                                          AutoGenerateColumns="False" DockPanel.Dock="Top" HorizontalAlignment="Left"
                                          CanUserAddRows="false"
                                    >
                                        <DataGrid.Columns>

                                            <!--<DataGridTextColumn Header="ID" Binding="{Binding ResilienceWeight.ResilienceFactor.ID}" 
                                                             IsReadOnly="True" Width="auto" Visibility="Visible" FontSize="14">
                                            </DataGridTextColumn>-->

                                            <DataGridTextColumn Header="{x:Static resx:Resources.Resilience_Criteria}"  
                                                                Binding="{Binding ResilienceWeight.ResilienceFactor.Preparedness}" 
                                                                IsReadOnly="True" Width="195" FontSize="14"
                                                            >
                                                <DataGridTextColumn.ElementStyle>
                                                    <Style>
                                                        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                                        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
                                                    </Style>
                                                </DataGridTextColumn.ElementStyle>
                                            </DataGridTextColumn>

                                            <DataGridTemplateColumn Header="{x:Static resx:Resources.Resilience_Index}" >
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal" >
                                                            <Slider Value ="{Binding Value, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                Minimum="0" Maximum="1" IsSnapToTickEnabled="True" TickFrequency="0.25" TickPlacement="Both"
                                                                Width="75" Margin="3" ValueChanged="Slider_ValueChanged"
                                                                />
                                                            <TextBlock Text="{Binding Value, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, StringFormat=F2 }"
                                                                   Width="35" TextAlignment="Right" Margin="2,2,5,2" 
                                                                   >
                                                                <TextBlock.Style>
                                                                    <Style>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="TextBlock.Text" Value="1.00">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.75">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.50">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.25">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </TextBlock.Style>
                                                            </TextBlock>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>
                                            <DataGridTemplateColumn Header="{x:Static resx:Resources.Resilience_Relevance}" >
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal">
                                                            <Slider Value ="{Binding OverwrittenWeight, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                Minimum="0" Maximum="1" IsSnapToTickEnabled="True" TickFrequency="0.5" TickPlacement="Both"
                                                                Width="75"  Margin="3"
                                                                >
                                                            </Slider>
                                                            <TextBlock Text="{Binding OverwrittenWeight, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, StringFormat=F1}"
                                                                   Width="35" TextAlignment="Right" Margin="2,2,5,2"
                                                                   >
                                                                <TextBlock.Style>
                                                                    <Style>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="TextBlock.Text" Value="1.0">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.5">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </TextBlock.Style>
                                                            </TextBlock>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>
                                        </DataGrid.Columns>
                                    </DataGrid>
                                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5">
                                        <!--<Fluent:Button Header="{x:Static resx:Resources.Resilience_Copy}" Command="{Binding CopyResilienceCommand}" >
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnCopy}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>-->

                                        <Fluent:Button Header="{x:Static resx:Resources.Save}" 
                                                   Command="{Binding SaveResilienceCommand}" CommandParameter="{StaticResource True}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                    </StackPanel>

                                </DockPanel>
                            </ScrollViewer>
                        </DockPanel>
                    </TabItem>
                    <TabItem TabIndex="4" x:Name="TabPM">
                        <TabItem.Header>
                            <Grid Height="40" Width="40" x:Name="TabPMHeader">
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True"
                                             Content="{x:Static resx:Resources.MitigationMeasure}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid Background="Transparent"></Grid>
                                <Image Source="{StaticResource imgWall}" Height="35" Width="35"/>
                            </Grid>
                        </TabItem.Header>
                        <DockPanel LastChildFill="True">

                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                   DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                   FontSize="16" TextWrapping="Wrap" Text="{x:Static resx:Resources.MitigationMeasure}"/>
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_MitigationMeasure"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False"
                                           ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Map_Mapping}">
                                    <Fluent:RibbonGroupBox>
                                        <Fluent:Button Header="{x:Static resx:Resources.New}" 
                                                       Command="{Binding AddMitigationCommand}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPolygonPlus}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                        <Fluent:Button Header="{x:Static resx:Resources.Edit}"
                                                       Command="{Binding EditMitigationCommand}" >
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPolylineEdit}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                        <!--<Fluent:Button Header="{x:Static resx:Resources.Delete}"
                                                       Command="{Binding MessageBoxCommand}" CommandParameter="NOT IMPLEMENTED YET(i)">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnDeleteBin}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>-->
                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>

                            <xctk:PropertyGrid DockPanel.Dock="Top" Margin="5" 
                                               SelectedObject="{Binding Project.ProtectionMeasure}"   NameColumnWidth="220"                                                    
                                               IsCategorized="False" ShowSearchBox="False" ShowSortOptions="False" AutoGenerateProperties="True"
                                               ShowSummary="False" ShowTitle="False" FontSize="14"
                                                       >
                                <xctk:PropertyGrid.EditorDefinitions>
                                    <xctk:EditorTemplateDefinition >
                                        <xctk:EditorTemplateDefinition.TargetProperties>
                                            <System:String>Costs</System:String>
                                            <System:String>MaintenanceCosts</System:String>
                                        </xctk:EditorTemplateDefinition.TargetProperties>
                                        <xctk:EditorTemplateDefinition.EditingTemplate>
                                            <DataTemplate>
                                                <xctk:IntegerUpDown Value="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                                    Increment="10000"
                                                                    BorderThickness="0"
                                                                    ButtonSpinnerLocation="Right"
                                                                    HorizontalAlignment="Stretch"
                                                                    TextAlignment="Left"
                                                                    ShowButtonSpinner="True"
                                                                    AllowTextInput="True"
                                                                    FormatString="C0"
                                                                    />
                                            </DataTemplate>

                                        </xctk:EditorTemplateDefinition.EditingTemplate>
                                    </xctk:EditorTemplateDefinition>
                                </xctk:PropertyGrid.EditorDefinitions>
                            </xctk:PropertyGrid>

                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5">
                                <Fluent:Button Header="{x:Static resx:Resources.Save}" Command="{Binding UpdateMitigationMeasureCommand}">
                                    <Fluent:Button.LargeIcon>
                                        <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                    </Fluent:Button.LargeIcon>
                                </Fluent:Button>
                            </StackPanel>

                        </DockPanel>
                    </TabItem>
                    <TabItem TabIndex="5" x:Name="TabGK2" >
                        <TabItem.Header>
                            <Grid Height="40" Width="40" x:Name="TabGK2Header">
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True"
                                             Content="{x:Static resx:Resources.Hazard_Maps_after_Measure}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid Background="Transparent"></Grid>
                                <Image Source="{StaticResource imgFlashWall}"  Height="35" Width="35"/>
                            </Grid>
                        </TabItem.Header>
                        <DockPanel LastChildFill="True">

                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                   DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                   FontSize="16" TextWrapping="Wrap" Text="{x:Static resx:Resources.Hazard_Maps_after_Measure}"/>
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_DangerMap"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False"
                                           ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Map_Mapping}">
                                    <Fluent:RibbonGroupBox Header="{x:Static resx:Resources.Hazard_Map_Mapping}" State="Large">

                                        <Fluent:ComboBox Header="{x:Static resx:Resources.NatHazard}"  IsEditable="False"
                                                         Text="{x:Static resx:Resources.PleaseSelect}" 
                                                         InputWidth="150"
                                                         ItemsSource="{Binding NatHazards}"
                                                         DisplayMemberPath="Name"
                                                         SelectedItem ="{Binding SelectedNatHazard}">
                                        </Fluent:ComboBox>

                                        <Fluent:ComboBox Header="{x:Static resx:Resources.HazardIndex}"  IsEditable="False"
                                                         Text="{x:Static resx:Resources.PleaseSelect}" 
                                                         InputWidth="150"
                                                         SelectedItem="{Binding SelectedHazardIndex}"
                                                         ItemsSource="{Binding HazardIndexes}"
                                                         DisplayMemberPath="Index"
                                                         >
                                        </Fluent:ComboBox>
                                        <!--TODO: add better hazard index selector. ? Slider / Buttons / Colors -->
                                        <!--<Slider Value="{Binding SelectedHazardIndex.Index}" Minimum="1" Maximum="9"/>-->
                                        <Fluent:Button Header="{x:Static resx:Resources.New}" 
                                                       Command="{Binding CreateHazardMapCommand}"
                                                       CommandParameter="{StaticResource False}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPolygonPlus}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                        <Separator/>
                                        <Fluent:Button Header="{x:Static resx:Resources.Map_Selection}"
                                                       Command="{Binding SelectHazardMapCommand}"
                                                       CommandParameter="{StaticResource False}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnSelection}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>

                            <Label DockPanel.Dock="Top" Margin="0,10,0,0"
                                   FontWeight="Bold" Visibility="{Binding SelectedHazardMap, Converter={StaticResource NullVisibiltyConverter}}" 
                                   Content="{x:Static resx:Resources.Hazard_Map_Selected}"
                                   />

                            <xctk:PropertyGrid DockPanel.Dock="Top" Margin="0,5" SelectedObject="{Binding SelectedHazardMap}"
                                               IsCategorized="False" ShowSearchBox="False" ShowSortOptions="False"
                                               ShowSummary="False" ShowTitle="False"
                                               Visibility="{Binding SelectedHazardMap, Converter={StaticResource NullVisibiltyConverter}}"
                                               >

                            </xctk:PropertyGrid>

                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5"
                                        Visibility="{Binding SelectedHazardMap, Converter={StaticResource NullVisibiltyConverter}}"
                                        >
                                <Fluent:Button Header="{x:Static resx:Resources.Save}" Command="{Binding UpdateSelectedHazardMapCommand}">
                                    <Fluent:Button.LargeIcon>
                                        <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                    </Fluent:Button.LargeIcon>
                                </Fluent:Button>
                                <Fluent:Button Header="{x:Static resx:Resources.Edit_Geometry}" 
                                               Command="{Binding EditHazardMapCommand}"
                                               CommandParameter="{StaticResource False}">
                                    <Fluent:Button.LargeIcon>
                                        <ContentControl ContentTemplate="{StaticResource extBtnPolylineEdit}"/>
                                    </Fluent:Button.LargeIcon>
                                </Fluent:Button>
                            </StackPanel>
                        </DockPanel>
                    </TabItem>
                    <TabItem TabIndex="6" x:Name="TabResilience2">
                        <TabItem.Header>
                            <Grid Height="40" Width="40" x:Name="TabResilience2Header">
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True"
                                             Content="{x:Static resx:Resources.Resilience_after_Measure}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid Background="Transparent"></Grid>
                                <Image Source="{StaticResource imgSproutWall}"  Height="35" Width="35"/>
                            </Grid>
                        </TabItem.Header>
                        <DockPanel LastChildFill="True">

                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                   DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                   FontSize="16" TextWrapping="Wrap" Text="{x:Static resx:Resources.Resilience_after_Measure}"/>
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_Resilience"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False" 
                                           ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Resilience}">
                                    <!--Header="{x:Static resx:Resources.Map_Selection}"-->
                                    <Fluent:RibbonGroupBox>
                                        <Fluent:Button Header="{x:Static resx:Resources.Resilience_CopyAll}" Command="{Binding CopyAllResilienceCommand}"
                                                       CommandParameter="{StaticResource True}"
                                                       Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyCollapsedConverter}}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnCopyAll}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>

                                        <Separator Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyCollapsedConverter}}"/>

                                        <Fluent:Button Header="{x:Static resx:Resources.Map_Selection}" 
                                                       Command="{Binding SelectResilienceCommand}"
                                                       CommandParameter="{StaticResource False}"
                                                       >
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnSelection}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>

                            <ScrollViewer DockPanel.Dock="Top">
                                <DockPanel ScrollViewer.CanContentScroll="True" DockPanel.Dock="Top"
                                       Visibility="{Binding SelectedMappedObject, Converter={StaticResource NullVisibiltyConverter}}"
                                           >
                                    <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="0,10,0,0" >
                                        <Label FontWeight="Bold" 
                                               Content="{x:Static resx:Resources.DamagePotential_Selected}"
                                               />
                                        <Label Content="{Binding SelectedMappedObject.Objectparameter.Name}"
                                               />
                                    </StackPanel>

                                    <DataGrid ItemsSource="{Binding SelectedMergedObjectParameter.ResilienceValuesMergedAfter}" Margin="0,5"
                                          AutoGenerateColumns="False" DockPanel.Dock="Top" HorizontalAlignment="Left"
                                          CanUserAddRows="false"
                                    >
                                        <DataGrid.Columns>
                                            <!--<DataGridTextColumn Header="ID" Binding="{Binding ResilienceWeight.ResilienceFactor.ID}" 
                                                             IsReadOnly="True" Width="auto" Visibility="Visible" FontSize="14">
                                            </DataGridTextColumn>-->

                                            <DataGridTextColumn Header="{x:Static resx:Resources.Resilience_Criteria}"  
                                                                Binding="{Binding ResilienceWeight.ResilienceFactor.Preparedness}" 
                                                                IsReadOnly="True" Width="200" FontSize="14"
                                                            >
                                                <DataGridTextColumn.ElementStyle>
                                                    <Style>
                                                        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                                                        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
                                                    </Style>
                                                </DataGridTextColumn.ElementStyle>
                                            </DataGridTextColumn>

                                            <DataGridTemplateColumn Header="{x:Static resx:Resources.Resilience_Index}" >
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal" >
                                                            <Slider Value ="{Binding Value, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                Minimum="0" Maximum="1" IsSnapToTickEnabled="True" TickFrequency="0.25" TickPlacement="Both"
                                                                Width="80" Margin="3" ValueChanged="Slider_ValueChanged"
                                                                />
                                                            <TextBlock Text="{Binding Value, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, StringFormat=F2 }"
                                                                   Width="30" TextAlignment="Right" Margin="2"
                                                                   >
                                                                <TextBlock.Style>
                                                                    <Style>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="TextBlock.Text" Value="1.00">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.75">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.50">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.25">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </TextBlock.Style>
                                                            </TextBlock>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>
                                            <DataGridTemplateColumn Header="{x:Static resx:Resources.Resilience_Relevance}" >
                                                <DataGridTemplateColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <StackPanel Orientation="Horizontal">
                                                            <Slider Value ="{Binding OverwrittenWeight, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                                Minimum="0" Maximum="1" IsSnapToTickEnabled="True" TickFrequency="0.50" TickPlacement="Both"
                                                                Width="80"  Margin="3"
                                                                />
                                                            <TextBlock Text="{Binding OverwrittenWeight, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, StringFormat=F1}"
                                                                   Width="30" TextAlignment="Right" Margin="2"
                                                                   >
                                                                <TextBlock.Style>
                                                                    <Style>
                                                                        <Style.Triggers>
                                                                            <Trigger Property="TextBlock.Text" Value="1.0">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                            <Trigger Property="TextBlock.Text" Value="0.5">
                                                                                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                                                                            </Trigger>
                                                                        </Style.Triggers>
                                                                    </Style>
                                                                </TextBlock.Style>
                                                            </TextBlock>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </DataGridTemplateColumn.CellTemplate>
                                            </DataGridTemplateColumn>
                                        </DataGrid.Columns>
                                    </DataGrid>
                                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="5">
                                        <Fluent:Button Header="{x:Static resx:Resources.Save}" 
                                                   Command="{Binding SaveResilienceCommand}" CommandParameter="{StaticResource False}">
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnSave}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                    </StackPanel>
                                </DockPanel>
                            </ScrollViewer>
                        </DockPanel>
                    </TabItem>

                    <TabItem TabIndex="7" x:Name="TabResult">
                        <TabItem.Header>
                            <Grid Height="40" Width="40" x:Name="TabResultHeader">
                                <Grid.ToolTip>
                                    <ToolTip cez:ToolTipAssist.AutoMove="True"
                                             Content="{x:Static resx:Resources.Analysis}" ContentTemplate="{StaticResource ToolTipTemplate}"
                                             Style="{StaticResource ToolTipStyle}">
                                    </ToolTip>
                                </Grid.ToolTip>
                                <Grid Background="Transparent"></Grid>
                                <Image Source="{StaticResource imgCalculator}" Height="35" Width="35"/>
                            </Grid>
                        </TabItem.Header>
                        <DockPanel LastChildFill="False">

                            <Grid DockPanel.Dock="Top" >
                                <TextBlock Background="{StaticResource MainRedBrush}" Foreground="White"
                                   DockPanel.Dock="Top" Margin="0,0,0,5" Padding="5"
                                   FontSize="16" TextWrapping="Wrap" Text="{x:Static resx:Resources.Analysis}"/>
                                <Button ContentTemplate="{StaticResource extBtnQuestion2}" Background="Transparent" BorderBrush="Transparent"
                                        VerticalAlignment="Top" HorizontalAlignment="Right"
                                        Height="20" Margin="5" Width="30"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_Results"
                                        />
                            </Grid>

                            <Fluent:Ribbon DockPanel.Dock="Top" CanMinimize="False" 
                                           ContextMenuOpening="RibbonMain_ContextMenuOpening"
                                           CanCustomizeQuickAccessToolBar="False" 
                                           CanCustomizeQuickAccessToolBarItems="False"
                                           CanCustomizeRibbon="False" >
                                <Fluent:RibbonTabItem Header="{x:Static resx:Resources.Result_Header}">
                                    <Fluent:RibbonGroupBox>
                                        <Fluent:Button Header="{x:Static resx:Resources.Result_ShowCalc}"
                                                       Command="{Binding RunKernelCommand}"
                                                       CommandParameter="{StaticResource False}"
                                                       >
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPlay}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>

                                        <Fluent:Button Header="{x:Static resx:Resources.Result_ShowCalcDetails}"
                                                       Command="{Binding RunKernelCommand}"
                                                       CommandParameter="{StaticResource True}"
                                                       Size="Middle"
                                                       >
                                            <Fluent:Button.Icon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPlay}"/>
                                            </Fluent:Button.Icon>
                                            <Fluent:Button.LargeIcon>
                                                <ContentControl ContentTemplate="{StaticResource extBtnPlay}"/>
                                            </Fluent:Button.LargeIcon>
                                        </Fluent:Button>
                                    </Fluent:RibbonGroupBox>
                                </Fluent:RibbonTabItem>
                            </Fluent:Ribbon>

                            <DockPanel ScrollViewer.CanContentScroll="True" DockPanel.Dock="Top"
                                       >
                                <Label DockPanel.Dock="Top" Margin="0,10,0,0"
                                       FontWeight="Bold" 
                                       Content="{x:Static resx:Resources.Legend}" 
                                       />
                                <Label DockPanel.Dock="Top" Margin="0,10,0,0"
                                       FontWeight="Bold" 
                                       Content="{x:Static resx:Resources.RiskMap}" 
                                       />

                                <Grid DockPanel.Dock="Top"  Margin="0,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="100" Width="auto"/>
                                        <ColumnDefinition Width="120"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="5"/>
                                        <RowDefinition/>
                                        <RowDefinition Height="5"/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>

                                    <Label Grid.Row ="0"  Content="{x:Static resx:Resources.Intensity_low}"/>
                                    <Label Grid.Row ="2"  Content="{x:Static resx:Resources.Intensity_medium}" />
                                    <Label Grid.Row ="4"  Content="{x:Static resx:Resources.Intensity_high}" />

                                    <Label Grid.Row ="0" Grid.Column="1" Content="" 
                                           Background="White" BorderThickness="1" BorderBrush="Black"/>
                                    <Label Grid.Row ="2" Grid.Column="1" Content="" 
                                           Background="LightCoral" BorderThickness="1" BorderBrush="Black"/>
                                    <Label Grid.Row ="4" Grid.Column="1" Content="" 
                                           Background="Red" BorderThickness="1" BorderBrush="Black"/>

                                </Grid>
                            </DockPanel>


                            <!--<WebBrowser Name="myWebBrowser" DockPanel.Dock="Top" Visibility="Collapsed"></WebBrowser>-->

                            <!--<WindowsFormsHost x:Name="wfhSample" DockPanel.Dock="Top">
                                <WindowsFormsHost.Child>
                                    <wf:WebBrowser x:Name="myWebBrowser2" />
                                </WindowsFormsHost.Child>
                            </WindowsFormsHost>-->

                            <!--<Border DockPanel.Dock="Top" BorderBrush="Gray" BorderThickness="0,1">
                                <cef:ChromiumWebBrowser x:Name="Browser" Address="www.google.com"/>
                            </Border>-->

                        </DockPanel>
                    </TabItem>
                </TabControl>
            </DockPanel>

            <!-- grid splitter to the left of the map -->
            <Rectangle Grid.Column="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="LightGray"/>
            <GridSplitter Grid.Column="1" ShowsPreview="False"/>

            <!--THE MAP CONTROL in the middle-->
            <map:MapControl Grid.Column="2"  Name="Karte" />

            <!-- grid splitter to the right of the map -->
            <Rectangle Grid.Column="3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Fill="LightGray"/>
            <GridSplitter Grid.Column="3" x:Name="GridSplitterMinimizer">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding HideToolColumnCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <GridSplitter.ToolTip>
                    <ToolTip cez:ToolTipAssist.AutoMove="True" 
                             Content="{x:Static resx:Resources.Info_DoubleClick_Minimize}" 
                             />
                </GridSplitter.ToolTip>
            </GridSplitter>

            <!--TOOL COLUMN ON THE RIGHT-->
            <DockPanel Grid.Column="4" LastChildFill="False" Margin="0,0,0,0" >
                <!--Layer management-->
                <Expander DockPanel.Dock="Top" 
                          IsExpanded="True"
                          Style="{StaticResource BoldExpanderStyle}"
                          Header="{x:Static resx:Resources.Layer_Management}"
                          >
                    <DockPanel >
                        <!--Tile provider menu line-->
                        <Grid DockPanel.Dock="Top">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <Label Grid.Row="0" Grid.Column="0"
                                   VerticalAlignment="Center" Content="{x:Static resx:Resources.Map_Provider}" Margin="0,0,5,0"/>

                            <ComboBox Grid.Row="0" Grid.Column="1" DockPanel.Dock="Top" 
                                      IsEditable="False"
                                      ItemsSource="{Binding Source={StaticResource TileProviderValues}}"
                                      SelectedValue="{Binding CurrentTileProvider}"
                                      >
                                <!--DisplayMemberPath="Description"-->
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding MapProviderCommand}" CommandParameter="{Binding CurrentTileProvider}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                            <Button ContentTemplate="{StaticResource extBtnQuestion}" Grid.Row="0" Grid.Column="2" 
                                        VerticalAlignment="Stretch" HorizontalAlignment="Right"
                                        Margin="2,0,0,0" Width="20"
                                        ToolTip="{x:Static resx:Resources.GUI_Help}"
                                        Command="{Binding HelpCommand}" CommandParameter="IDH_Layers"
                                    
                                        />

                        </Grid>

                        <!--layer handling menu line-->
                        <ToolBar DockPanel.Dock="Top" >
                            <Button ContentTemplate="{StaticResource extBtnCenter}" ToolTip="{x:Static resx:Resources.Layer_Fit}"
                                    Command="{Binding CenterLayerCommand}" Style="{StaticResource {x:Type Button}}"
                                    >
                            </Button>
                            <Separator/>
                            <Button ContentTemplate="{StaticResource extBtnDeleteBin}" ToolTip="{x:Static resx:Resources.Layer_Remove}" IsEnabled="True"
                                    Command="{Binding RemoveLayerCommand}" Style="{StaticResource {x:Type Button}}"
                                    >
                            </Button>
                            <Separator/>
                            <Button Grid.Column="0" ContentTemplate="{StaticResource extBtnMapPlusContent}" ToolTip="{x:Static resx:Resources.Raster_Add}" 
                                    HorizontalAlignment="Stretch"
                                    Command="{Binding AddRasterCommand}" Content="{x:Static resx:Resources.Raster_Add}" DockPanel.Dock="Top" Height="30"
                                    Style="{StaticResource {x:Type Button}}"/>
                        </ToolBar>

                        <!--the layer tree-->
                        <TreeView x:Name="tree"
                                  ItemContainerStyle="{StaticResource TreeViewItemStyle}"
                                  ItemsSource="{Binding MapLayers, Mode=TwoWay}"
                                  ItemTemplate="{StaticResource CheckBoxItemTemplate}" DockPanel.Dock="Top" VerticalAlignment="Stretch" MinHeight="100"
                                  >
                            <i:Interaction.Behaviors>
                                <layerhelper:BindableSelectedItemBehavior SelectedItem="{Binding SelectedLayer, Mode=TwoWay}" />
                            </i:Interaction.Behaviors>
                        </TreeView>

                    </DockPanel>
                </Expander>
                <Separator DockPanel.Dock="Top"/>
                
                <!--go to coordinates-->
                <Expander DockPanel.Dock="Top" Header="{x:Static resx:Resources.Coord_Goto}" IsExpanded="False"
                          Style="{StaticResource BoldExpanderStyle}">
                    <DockPanel LastChildFill="False" Margin="0,5">
                        <Label Content="{x:Static resx:Resources.Coord_Long}"/>
                        <xctk:DoubleUpDown Width="60" DockPanel.Dock="Left" ShowButtonSpinner="False"
                                           Value="{Binding GoToCoordinates.longitude}" ToolTip="{x:Static resx:Resources.Coord_Long_WGS}"></xctk:DoubleUpDown>
                        <Label Content="{x:Static resx:Resources.Coord_Lat}"/>
                        <xctk:DoubleUpDown Width="60" DockPanel.Dock="Left" ShowButtonSpinner="False"
                                           Value="{Binding GoToCoordinates.latitude}" ToolTip="{x:Static resx:Resources.Coord_Lat_WGS}" ></xctk:DoubleUpDown>
                        <Button Content="{x:Static resx:Resources.Coord_Go}" DockPanel.Dock="Left" Command="{Binding GoToCoordinates2Command}" Margin="5,0,0,0" Padding="5,0"/>
                    </DockPanel>
                </Expander>
                <Separator DockPanel.Dock="Top"/>
                
                <!--geoNames offline database-->
                <Expander DockPanel.Dock="Top" Header="{x:Static resx:Resources.GeoNames_DB}" IsExpanded="False"
                          Style="{StaticResource BoldExpanderStyle}">
                    <DockPanel LastChildFill="True">
                        <!--search field-->
                        <Grid DockPanel.Dock="Top" Margin="0,5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="20"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Text="{x:Static resx:Resources.Search}" Margin="0,0,5,0"/>
                            <TextBox Grid.Column="1" Text="{Binding PlaceFilterString, UpdateSourceTrigger=PropertyChanged}" />

                            <Button Grid.Column="2" Content="X" FontWeight="Bold" Command="{Binding PlaceFilterStringResetCommand}"/>
                        </Grid>
                        <!--result count at the bottom-->
                        <Grid DockPanel.Dock="Bottom" Margin="0,5" HorizontalAlignment="Right"
                              Visibility="{Binding PlaceFilterString, Converter={StaticResource StringVisibiltyConverter}}"
                              >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Text="{x:Static resx:Resources.Search_Hits}" Margin="0,0,5,0"/>
                            <TextBlock Grid.Column="1" Text="{Binding FilteredPlaces.Count}" />
                        </Grid>
                        <!--list with search result-->
                        <ListView Margin="0,5" ItemsSource="{Binding FilteredPlaces}" SelectedItem="{Binding SelectedPlace}" DockPanel.Dock="Top"
                                  Visibility="{Binding PlaceFilterString, Converter={StaticResource StringVisibiltyConverter}}"
                                  >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="MouseDoubleClick">
                                    <i:InvokeCommandAction 
                                    Command="{Binding GoToCoordinatesCommand}" CommandParameter="{Binding SelectedPlace}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="KeyDown">
                                    <i:InvokeCommandAction 
                                    Command="{Binding GoToCoordinatesCommand}" CommandParameter="{Binding SelectedPlace}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="{x:Static resx:Resources.Name}" Width="150" DisplayMemberBinding="{Binding name}" />
                                    <!--<GridViewColumn Header="{x:Static resx:Resources.Name}" Width="150" DisplayMemberBinding="{Binding alternatenames}" />-->
                                    <GridViewColumn Header="Code" Width="50" DisplayMemberBinding="{Binding featurecode}" />
                                    <GridViewColumn Header="Lat" Width="65" DisplayMemberBinding="{Binding latitude, StringFormat=\{0:F5\}}" />
                                    <GridViewColumn Header="Long" Width="65" DisplayMemberBinding="{Binding longitude, StringFormat=\{0:F5\}}" />
                                </GridView>
                            </ListView.View>
                        </ListView>

                    </DockPanel>
                </Expander>
                
            </DockPanel>

        </Grid>

        <!--STATUS BAR-->
        <Fluent:StatusBar Grid.Row="3" VerticalAlignment="Center" Height="30" Background="{StaticResource MainRedBrush}" >
            <Fluent:StatusBarItem Title="Messages"
                                  Content="{Binding StatusBarMainString}"
                                  HorizontalAlignment="Left" Margin="5,0,0,0" MinWidth="480"                                  
                                  />
            <Fluent:StatusBarItem Title="Status Bar"
                                  HorizontalAlignment="Left" Margin="0,0,0,0"
                                  Visibility="{Binding StatusBarProgressBarVisible, Converter={StaticResource BoolVisibiltyConverter}}"
                                  >
                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" >
                    <ProgressBar Width="100" Margin="3,3,10,3" Value="{Binding StatusBarProgressBarPercent}" IsIndeterminate="{Binding StatusBarIndeterminate}" ToolTip="{Binding StatusBarProgressBarPercent}"/>
                    <TextBlock Text="{Binding StatusBarProgressBarMessageString}"/>
                </StackPanel>
            </Fluent:StatusBarItem>

            <!--Connection status-->
            <Fluent:StatusBarItem Title="Connection Status" Visibility="Visible"
                                  HorizontalAlignment="Right"
                                  Margin="0,0,0,0" VerticalAlignment="Center"                                  
                                  >
                <StackPanel Orientation="Horizontal" Margin="0">
                    <StackPanel Orientation="Horizontal" Margin="5,0">
                        <Image Margin="5">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasInternetConnection}" Value="False">
                                            <Setter Property="Source" Value="{StaticResource imgDisconnect}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HasInternetConnection}" Value="True">
                                            <Setter Property="Source" Value="{StaticResource imgConnect}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Margin="5">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasInternetConnection}" Value="False">
                                            <Setter Property="Text" Value="{x:Static resx:Resources.Msg_Internet_No}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HasInternetConnection}" Value="True">
                                            <Setter Property="Text" Value="{x:Static resx:Resources.Msg_Internet_Ok}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" Margin="5,0">
                        <Image Margin="5">
                            <Image.Style>
                                <Style TargetType="{x:Type Image}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasDBConnection}" Value="False">
                                            <Setter Property="Source" Value="{StaticResource imgDatabaseError}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HasDBConnection}" Value="True">
                                            <Setter Property="Source" Value="{StaticResource imgDatabaseOK}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>
                        <TextBlock Margin="5">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasDBConnection}" Value="False">
                                            <Setter Property="Text" Value="{x:Static resx:Resources.Msg_Db_Disconnected}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HasDBConnection}" Value="True">
                                            <Setter Property="Text" Value="{x:Static resx:Resources.Msg_Db_Connected}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </StackPanel>
            </Fluent:StatusBarItem>
        </Fluent:StatusBar>

    </Grid>

</Fluent:RibbonWindow>